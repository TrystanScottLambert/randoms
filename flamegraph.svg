<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="105843"><g><title>&lt;deduplicated_symbol&gt; (24 samples, 0.02%)</title><rect x="0.0302%" y="165" width="0.0227%" height="15" fill="rgb(227,0,7)" fg:x="32" fg:w="24"/><text x="0.2802%" y="175.50"></text></g><g><title>_free (40 samples, 0.04%)</title><rect x="0.0605%" y="165" width="0.0378%" height="15" fill="rgb(217,0,24)" fg:x="64" fg:w="40"/><text x="0.3105%" y="175.50"></text></g><g><title>_malloc_zone_malloc (38 samples, 0.04%)</title><rect x="0.0983%" y="165" width="0.0359%" height="15" fill="rgb(221,193,54)" fg:x="104" fg:w="38"/><text x="0.3483%" y="175.50"></text></g><g><title>_platform_memset_pattern16 (27 samples, 0.03%)</title><rect x="0.1342%" y="165" width="0.0255%" height="15" fill="rgb(248,212,6)" fg:x="142" fg:w="27"/><text x="0.3842%" y="175.50"></text></g><g><title>_xzm_free (21 samples, 0.02%)</title><rect x="0.1597%" y="165" width="0.0198%" height="15" fill="rgb(208,68,35)" fg:x="169" fg:w="21"/><text x="0.4097%" y="175.50"></text></g><g><title>_xzm_xzone_malloc (44 samples, 0.04%)</title><rect x="0.1795%" y="165" width="0.0416%" height="15" fill="rgb(232,128,0)" fg:x="190" fg:w="44"/><text x="0.4295%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (80 samples, 0.08%)</title><rect x="0.2305%" y="149" width="0.0756%" height="15" fill="rgb(207,160,47)" fg:x="244" fg:w="80"/><text x="0.4805%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (87 samples, 0.08%)</title><rect x="0.3061%" y="149" width="0.0822%" height="15" fill="rgb(228,23,34)" fg:x="324" fg:w="87"/><text x="0.5561%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (13 samples, 0.01%)</title><rect x="0.3883%" y="149" width="0.0123%" height="15" fill="rgb(218,30,26)" fg:x="411" fg:w="13"/><text x="0.6383%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (13 samples, 0.01%)</title><rect x="0.4110%" y="149" width="0.0123%" height="15" fill="rgb(220,122,19)" fg:x="435" fg:w="13"/><text x="0.6610%" y="159.50"></text></g><g><title>alloc::alloc::alloc (220 samples, 0.21%)</title><rect x="0.2305%" y="165" width="0.2079%" height="15" fill="rgb(250,228,42)" fg:x="244" fg:w="220"/><text x="0.4805%" y="175.50"></text></g><g><title>_xzm_free (30 samples, 0.03%)</title><rect x="0.4563%" y="149" width="0.0283%" height="15" fill="rgb(240,193,28)" fg:x="483" fg:w="30"/><text x="0.7063%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (54 samples, 0.05%)</title><rect x="0.4384%" y="165" width="0.0510%" height="15" fill="rgb(216,20,37)" fg:x="464" fg:w="54"/><text x="0.6884%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (12 samples, 0.01%)</title><rect x="0.4998%" y="149" width="0.0113%" height="15" fill="rgb(206,188,39)" fg:x="529" fg:w="12"/><text x="0.7498%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (11 samples, 0.01%)</title><rect x="0.5111%" y="149" width="0.0104%" height="15" fill="rgb(217,207,13)" fg:x="541" fg:w="11"/><text x="0.7611%" y="159.50"></text></g><g><title>_xzm_free (38 samples, 0.04%)</title><rect x="0.5404%" y="149" width="0.0359%" height="15" fill="rgb(231,73,38)" fg:x="572" fg:w="38"/><text x="0.7904%" y="159.50"></text></g><g><title>randoms::cosmology::Cosmology::comoving_distance (596 samples, 0.56%)</title><rect x="0.0302%" y="181" width="0.5631%" height="15" fill="rgb(225,20,46)" fg:x="32" fg:w="596"/><text x="0.2802%" y="191.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (107 samples, 0.10%)</title><rect x="0.4922%" y="165" width="0.1011%" height="15" fill="rgb(210,31,41)" fg:x="521" fg:w="107"/><text x="0.7422%" y="175.50"></text></g><g><title>randoms::cosmology::Cosmology::inverse_lumdist::_{{closure}} (598 samples, 0.56%)</title><rect x="0.0302%" y="197" width="0.5650%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="598"/><text x="0.2802%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (600 samples, 0.57%)</title><rect x="0.0302%" y="229" width="0.5669%" height="15" fill="rgb(226,26,5)" fg:x="32" fg:w="600"/><text x="0.2802%" y="239.50"></text></g><g><title>randoms::cosmology::inverse (600 samples, 0.57%)</title><rect x="0.0302%" y="213" width="0.5669%" height="15" fill="rgb(249,33,26)" fg:x="32" fg:w="600"/><text x="0.2802%" y="223.50"></text></g><g><title>core::ptr::write (45 samples, 0.04%)</title><rect x="0.5990%" y="229" width="0.0425%" height="15" fill="rgb(235,183,28)" fg:x="634" fg:w="45"/><text x="0.8490%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (18 samples, 0.02%)</title><rect x="0.7124%" y="181" width="0.0170%" height="15" fill="rgb(221,5,38)" fg:x="754" fg:w="18"/><text x="0.9624%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (11 samples, 0.01%)</title><rect x="0.8239%" y="165" width="0.0104%" height="15" fill="rgb(247,18,42)" fg:x="872" fg:w="11"/><text x="1.0739%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (38 samples, 0.04%)</title><rect x="0.8343%" y="165" width="0.0359%" height="15" fill="rgb(241,131,45)" fg:x="883" fg:w="38"/><text x="1.0843%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (41 samples, 0.04%)</title><rect x="0.9070%" y="117" width="0.0387%" height="15" fill="rgb(249,31,29)" fg:x="960" fg:w="41"/><text x="1.1570%" y="127.50"></text></g><g><title>__rustc::__rdl_realloc (13 samples, 0.01%)</title><rect x="0.9590%" y="117" width="0.0123%" height="15" fill="rgb(225,111,53)" fg:x="1015" fg:w="13"/><text x="1.2090%" y="127.50"></text></g><g><title>_malloc_zone_malloc (29 samples, 0.03%)</title><rect x="0.9741%" y="117" width="0.0274%" height="15" fill="rgb(238,160,17)" fg:x="1031" fg:w="29"/><text x="1.2241%" y="127.50"></text></g><g><title>_xzm_free (12 samples, 0.01%)</title><rect x="1.0516%" y="85" width="0.0113%" height="15" fill="rgb(214,148,48)" fg:x="1113" fg:w="12"/><text x="1.3016%" y="95.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (22 samples, 0.02%)</title><rect x="1.1555%" y="69" width="0.0208%" height="15" fill="rgb(232,36,49)" fg:x="1223" fg:w="22"/><text x="1.4055%" y="79.50"></text></g><g><title>_platform_memmove (23 samples, 0.02%)</title><rect x="1.1782%" y="69" width="0.0217%" height="15" fill="rgb(209,103,24)" fg:x="1247" fg:w="23"/><text x="1.4282%" y="79.50"></text></g><g><title>_xzm_free (60 samples, 0.06%)</title><rect x="1.1999%" y="69" width="0.0567%" height="15" fill="rgb(229,88,8)" fg:x="1270" fg:w="60"/><text x="1.4499%" y="79.50"></text></g><g><title>_malloc_zone_realloc (261 samples, 0.25%)</title><rect x="1.0364%" y="101" width="0.2466%" height="15" fill="rgb(213,181,19)" fg:x="1097" fg:w="261"/><text x="1.2864%" y="111.50"></text></g><g><title>xzm_realloc (225 samples, 0.21%)</title><rect x="1.0705%" y="85" width="0.2126%" height="15" fill="rgb(254,191,54)" fg:x="1133" fg:w="225"/><text x="1.3205%" y="95.50"></text></g><g><title>_xzm_xzone_malloc (28 samples, 0.03%)</title><rect x="1.2566%" y="69" width="0.0265%" height="15" fill="rgb(241,83,37)" fg:x="1330" fg:w="28"/><text x="1.5066%" y="79.50"></text></g><g><title>xzm_malloc_zone_size (68 samples, 0.06%)</title><rect x="1.2830%" y="101" width="0.0642%" height="15" fill="rgb(233,36,39)" fg:x="1358" fg:w="68"/><text x="1.5330%" y="111.50"></text></g><g><title>_realloc (382 samples, 0.36%)</title><rect x="1.0015%" y="117" width="0.3609%" height="15" fill="rgb(226,3,54)" fg:x="1060" fg:w="382"/><text x="1.2515%" y="127.50"></text></g><g><title>xzm_realloc (16 samples, 0.02%)</title><rect x="1.3473%" y="101" width="0.0151%" height="15" fill="rgb(245,192,40)" fg:x="1426" fg:w="16"/><text x="1.5973%" y="111.50"></text></g><g><title>_xzm_xzone_malloc (26 samples, 0.02%)</title><rect x="1.3624%" y="117" width="0.0246%" height="15" fill="rgb(238,167,29)" fg:x="1442" fg:w="26"/><text x="1.6124%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (534 samples, 0.50%)</title><rect x="0.8881%" y="149" width="0.5045%" height="15" fill="rgb(232,182,51)" fg:x="940" fg:w="534"/><text x="1.1381%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (532 samples, 0.50%)</title><rect x="0.8900%" y="133" width="0.5026%" height="15" fill="rgb(231,60,39)" fg:x="942" fg:w="532"/><text x="1.1400%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (13 samples, 0.01%)</title><rect x="1.3926%" y="149" width="0.0123%" height="15" fill="rgb(208,69,12)" fg:x="1474" fg:w="13"/><text x="1.6426%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.02%)</title><rect x="1.4068%" y="149" width="0.0189%" height="15" fill="rgb(235,93,37)" fg:x="1489" fg:w="20"/><text x="1.6568%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (598 samples, 0.56%)</title><rect x="0.8796%" y="165" width="0.5650%" height="15" fill="rgb(213,116,39)" fg:x="931" fg:w="598"/><text x="1.1296%" y="175.50"></text></g><g><title>DYLD-STUB$$memcpy (19 samples, 0.02%)</title><rect x="1.4512%" y="149" width="0.0180%" height="15" fill="rgb(222,207,29)" fg:x="1536" fg:w="19"/><text x="1.7012%" y="159.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (851 samples, 0.80%)</title><rect x="0.7369%" y="181" width="0.8040%" height="15" fill="rgb(206,96,30)" fg:x="780" fg:w="851"/><text x="0.9869%" y="191.50"></text></g><g><title>core::ptr::copy_nonoverlapping (95 samples, 0.09%)</title><rect x="1.4512%" y="165" width="0.0898%" height="15" fill="rgb(218,138,4)" fg:x="1536" fg:w="95"/><text x="1.7012%" y="175.50"></text></g><g><title>_platform_memmove (76 samples, 0.07%)</title><rect x="1.4692%" y="149" width="0.0718%" height="15" fill="rgb(250,191,14)" fg:x="1555" fg:w="76"/><text x="1.7192%" y="159.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (23 samples, 0.02%)</title><rect x="1.5410%" y="181" width="0.0217%" height="15" fill="rgb(239,60,40)" fg:x="1631" fg:w="23"/><text x="1.7910%" y="191.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_shortest (37 samples, 0.03%)</title><rect x="1.5627%" y="181" width="0.0350%" height="15" fill="rgb(206,27,48)" fg:x="1654" fg:w="37"/><text x="1.8127%" y="191.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (1,441 samples, 1.36%)</title><rect x="0.6510%" y="197" width="1.3615%" height="15" fill="rgb(225,35,8)" fg:x="689" fg:w="1441"/><text x="0.9010%" y="207.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (439 samples, 0.41%)</title><rect x="1.5976%" y="181" width="0.4148%" height="15" fill="rgb(250,213,24)" fg:x="1691" fg:w="439"/><text x="1.8476%" y="191.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (1,462 samples, 1.38%)</title><rect x="0.6415%" y="213" width="1.3813%" height="15" fill="rgb(247,123,22)" fg:x="679" fg:w="1462"/><text x="0.8915%" y="223.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (11 samples, 0.01%)</title><rect x="2.0124%" y="197" width="0.0104%" height="15" fill="rgb(231,138,38)" fg:x="2130" fg:w="11"/><text x="2.2624%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.02%)</title><rect x="2.0275%" y="197" width="0.0180%" height="15" fill="rgb(231,145,46)" fg:x="2146" fg:w="19"/><text x="2.2775%" y="207.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (11 samples, 0.01%)</title><rect x="2.0540%" y="181" width="0.0104%" height="15" fill="rgb(251,118,11)" fg:x="2174" fg:w="11"/><text x="2.3040%" y="191.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="2.0455%" y="197" width="0.0217%" height="15" fill="rgb(217,147,25)" fg:x="2165" fg:w="23"/><text x="2.2955%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (28 samples, 0.03%)</title><rect x="2.0672%" y="197" width="0.0265%" height="15" fill="rgb(247,81,37)" fg:x="2188" fg:w="28"/><text x="2.3172%" y="207.50"></text></g><g><title>core::ptr::write (27 samples, 0.03%)</title><rect x="2.0956%" y="197" width="0.0255%" height="15" fill="rgb(209,12,38)" fg:x="2218" fg:w="27"/><text x="2.3456%" y="207.50"></text></g><g><title>interp::interp (60 samples, 0.06%)</title><rect x="2.1211%" y="197" width="0.0567%" height="15" fill="rgb(227,1,9)" fg:x="2245" fg:w="60"/><text x="2.3711%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (61 samples, 0.06%)</title><rect x="2.2533%" y="181" width="0.0576%" height="15" fill="rgb(248,47,43)" fg:x="2385" fg:w="61"/><text x="2.5033%" y="191.50"></text></g><g><title>_platform_memset_pattern16 (29 samples, 0.03%)</title><rect x="2.3129%" y="149" width="0.0274%" height="15" fill="rgb(221,10,30)" fg:x="2448" fg:w="29"/><text x="2.5629%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (33 samples, 0.03%)</title><rect x="2.3110%" y="165" width="0.0312%" height="15" fill="rgb(210,229,1)" fg:x="2446" fg:w="33"/><text x="2.5610%" y="175.50"></text></g><g><title>_xzm_free (193 samples, 0.18%)</title><rect x="2.3421%" y="165" width="0.1823%" height="15" fill="rgb(222,148,37)" fg:x="2479" fg:w="193"/><text x="2.5921%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="2.5245%" y="165" width="0.0208%" height="15" fill="rgb(234,67,33)" fg:x="2672" fg:w="22"/><text x="2.7745%" y="175.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.02%)</title><rect x="2.5254%" y="149" width="0.0198%" height="15" fill="rgb(247,98,35)" fg:x="2673" fg:w="21"/><text x="2.7754%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (580 samples, 0.55%)</title><rect x="2.5453%" y="149" width="0.5480%" height="15" fill="rgb(247,138,52)" fg:x="2694" fg:w="580"/><text x="2.7953%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (90 samples, 0.09%)</title><rect x="3.0933%" y="149" width="0.0850%" height="15" fill="rgb(213,79,30)" fg:x="3274" fg:w="90"/><text x="3.3433%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (67 samples, 0.06%)</title><rect x="3.1783%" y="149" width="0.0633%" height="15" fill="rgb(246,177,23)" fg:x="3364" fg:w="67"/><text x="3.4283%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (81 samples, 0.08%)</title><rect x="3.2416%" y="149" width="0.0765%" height="15" fill="rgb(230,62,27)" fg:x="3431" fg:w="81"/><text x="3.4916%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (100 samples, 0.09%)</title><rect x="3.3181%" y="149" width="0.0945%" height="15" fill="rgb(216,154,8)" fg:x="3512" fg:w="100"/><text x="3.5681%" y="159.50"></text></g><g><title>&lt;f64 as core::ops::arith::MulAssign&gt;::mul_assign (20 samples, 0.02%)</title><rect x="3.4126%" y="149" width="0.0189%" height="15" fill="rgb(244,35,45)" fg:x="3612" fg:w="20"/><text x="3.6626%" y="159.50"></text></g><g><title>DYLD-STUB$$malloc (61 samples, 0.06%)</title><rect x="3.4315%" y="149" width="0.0576%" height="15" fill="rgb(251,115,12)" fg:x="3632" fg:w="61"/><text x="3.6815%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (65 samples, 0.06%)</title><rect x="3.4891%" y="149" width="0.0614%" height="15" fill="rgb(240,54,50)" fg:x="3693" fg:w="65"/><text x="3.7391%" y="159.50"></text></g><g><title>_malloc_zone_malloc (339 samples, 0.32%)</title><rect x="3.5505%" y="149" width="0.3203%" height="15" fill="rgb(233,84,52)" fg:x="3758" fg:w="339"/><text x="3.8005%" y="159.50"></text></g><g><title>_xzm_xzone_malloc (223 samples, 0.21%)</title><rect x="3.8708%" y="149" width="0.2107%" height="15" fill="rgb(207,117,47)" fg:x="4097" fg:w="223"/><text x="4.1208%" y="159.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.02%)</title><rect x="4.0815%" y="149" width="0.0180%" height="15" fill="rgb(249,43,39)" fg:x="4320" fg:w="19"/><text x="4.3315%" y="159.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (46 samples, 0.04%)</title><rect x="4.0995%" y="149" width="0.0435%" height="15" fill="rgb(209,38,44)" fg:x="4339" fg:w="46"/><text x="4.3495%" y="159.50"></text></g><g><title>core::f64::math::powi (54 samples, 0.05%)</title><rect x="4.1429%" y="149" width="0.0510%" height="15" fill="rgb(236,212,23)" fg:x="4385" fg:w="54"/><text x="4.3929%" y="159.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (176 samples, 0.17%)</title><rect x="4.1939%" y="149" width="0.1663%" height="15" fill="rgb(242,79,21)" fg:x="4439" fg:w="176"/><text x="4.4439%" y="159.50"></text></g><g><title>malloc (29 samples, 0.03%)</title><rect x="4.3640%" y="149" width="0.0274%" height="15" fill="rgb(211,96,35)" fg:x="4619" fg:w="29"/><text x="4.6140%" y="159.50"></text></g><g><title>randoms::cosmology::Cosmology::e_func (93 samples, 0.09%)</title><rect x="4.3914%" y="149" width="0.0879%" height="15" fill="rgb(253,215,40)" fg:x="4648" fg:w="93"/><text x="4.6414%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2,071 samples, 1.96%)</title><rect x="2.5453%" y="165" width="1.9567%" height="15" fill="rgb(211,81,21)" fg:x="2694" fg:w="2071"/><text x="2.7953%" y="175.50">a..</text></g><g><title>xzm_malloc_zone_malloc_type_malloc (24 samples, 0.02%)</title><rect x="4.4793%" y="149" width="0.0227%" height="15" fill="rgb(208,190,38)" fg:x="4741" fg:w="24"/><text x="4.7293%" y="159.50"></text></g><g><title>_free (18 samples, 0.02%)</title><rect x="4.5256%" y="149" width="0.0170%" height="15" fill="rgb(235,213,38)" fg:x="4790" fg:w="18"/><text x="4.7756%" y="159.50"></text></g><g><title>_xzm_free (81 samples, 0.08%)</title><rect x="4.5426%" y="149" width="0.0765%" height="15" fill="rgb(237,122,38)" fg:x="4808" fg:w="81"/><text x="4.7926%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (138 samples, 0.13%)</title><rect x="4.5020%" y="165" width="0.1304%" height="15" fill="rgb(244,218,35)" fg:x="4765" fg:w="138"/><text x="4.7520%" y="175.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (11 samples, 0.01%)</title><rect x="4.6219%" y="149" width="0.0104%" height="15" fill="rgb(240,68,47)" fg:x="4892" fg:w="11"/><text x="4.8719%" y="159.50"></text></g><g><title>DYLD-STUB$$free (32 samples, 0.03%)</title><rect x="5.0074%" y="149" width="0.0302%" height="15" fill="rgb(210,16,53)" fg:x="5300" fg:w="32"/><text x="5.2574%" y="159.50"></text></g><g><title>__rustc::__rdl_dealloc (26 samples, 0.02%)</title><rect x="5.0377%" y="149" width="0.0246%" height="15" fill="rgb(235,124,12)" fg:x="5332" fg:w="26"/><text x="5.2877%" y="159.50"></text></g><g><title>__rustc::__rust_dealloc (203 samples, 0.19%)</title><rect x="5.0622%" y="149" width="0.1918%" height="15" fill="rgb(224,169,11)" fg:x="5358" fg:w="203"/><text x="5.3122%" y="159.50"></text></g><g><title>_free (153 samples, 0.14%)</title><rect x="5.2540%" y="149" width="0.1446%" height="15" fill="rgb(250,166,2)" fg:x="5561" fg:w="153"/><text x="5.5040%" y="159.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (11 samples, 0.01%)</title><rect x="6.1931%" y="133" width="0.0104%" height="15" fill="rgb(242,216,29)" fg:x="6555" fg:w="11"/><text x="6.4431%" y="143.50"></text></g><g><title>__bzero (40 samples, 0.04%)</title><rect x="6.2035%" y="133" width="0.0378%" height="15" fill="rgb(230,116,27)" fg:x="6566" fg:w="40"/><text x="6.4535%" y="143.50"></text></g><g><title>_xzm_free (990 samples, 0.94%)</title><rect x="5.3986%" y="149" width="0.9353%" height="15" fill="rgb(228,99,48)" fg:x="5714" fg:w="990"/><text x="5.6486%" y="159.50"></text></g><g><title>_platform_memset (98 samples, 0.09%)</title><rect x="6.2413%" y="133" width="0.0926%" height="15" fill="rgb(253,11,6)" fg:x="6606" fg:w="98"/><text x="6.4913%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="6.3339%" y="149" width="0.0217%" height="15" fill="rgb(247,143,39)" fg:x="6704" fg:w="23"/><text x="6.5839%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;integrate::utils::adaptive_simpson::SubInterval&lt;f64&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="6.3594%" y="149" width="0.0548%" height="15" fill="rgb(236,97,10)" fg:x="6731" fg:w="58"/><text x="6.6094%" y="159.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (41 samples, 0.04%)</title><rect x="6.4199%" y="149" width="0.0387%" height="15" fill="rgb(233,208,19)" fg:x="6795" fg:w="41"/><text x="6.6699%" y="159.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (1,938 samples, 1.83%)</title><rect x="4.6323%" y="165" width="1.8310%" height="15" fill="rgb(216,164,2)" fg:x="4903" fg:w="1938"/><text x="4.8823%" y="175.50">i..</text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (16 samples, 0.02%)</title><rect x="6.4633%" y="149" width="0.0151%" height="15" fill="rgb(220,129,5)" fg:x="6841" fg:w="16"/><text x="6.7133%" y="159.50"></text></g><g><title>randoms::cosmology::Cosmology::comoving_distance (4,469 samples, 4.22%)</title><rect x="2.3110%" y="181" width="4.2223%" height="15" fill="rgb(242,17,10)" fg:x="2446" fg:w="4469"/><text x="2.5610%" y="191.50">rando..</text></g><g><title>randoms::cosmology::Cosmology::comoving_distance (74 samples, 0.07%)</title><rect x="6.4633%" y="165" width="0.0699%" height="15" fill="rgb(242,107,0)" fg:x="6841" fg:w="74"/><text x="6.7133%" y="175.50"></text></g><g><title>randoms::cosmology::Cosmology::e_func (58 samples, 0.05%)</title><rect x="6.4785%" y="149" width="0.0548%" height="15" fill="rgb(251,28,31)" fg:x="6857" fg:w="58"/><text x="6.7285%" y="159.50"></text></g><g><title>randoms::cosmology::Cosmology::comoving_transverse_distance (67 samples, 0.06%)</title><rect x="6.5333%" y="181" width="0.0633%" height="15" fill="rgb(233,223,10)" fg:x="6915" fg:w="67"/><text x="6.7833%" y="191.50"></text></g><g><title>randoms::cosmology::Cosmology::differential_comoving_distance (148 samples, 0.14%)</title><rect x="6.5966%" y="181" width="0.1398%" height="15" fill="rgb(215,21,27)" fg:x="6982" fg:w="148"/><text x="6.8466%" y="191.50"></text></g><g><title>randoms::cosmology::Cosmology::e_func (79 samples, 0.07%)</title><rect x="6.7364%" y="181" width="0.0746%" height="15" fill="rgb(232,23,21)" fg:x="7130" fg:w="79"/><text x="6.9864%" y="191.50"></text></g><g><title>randoms::calculate_v_dc_max::_{{closure}} (5,278 samples, 4.99%)</title><rect x="2.1778%" y="197" width="4.9866%" height="15" fill="rgb(244,5,23)" fg:x="2305" fg:w="5278"/><text x="2.4278%" y="207.50">random..</text></g><g><title>randoms::cosmology::Cosmology::hubble_distance (374 samples, 0.35%)</title><rect x="6.8110%" y="181" width="0.3534%" height="15" fill="rgb(226,81,46)" fg:x="7209" fg:w="374"/><text x="7.0610%" y="191.50"></text></g><g><title>randoms::cosmology::Cosmology::differential_comoving_distance (84 samples, 0.08%)</title><rect x="7.1644%" y="197" width="0.0794%" height="15" fill="rgb(247,70,30)" fg:x="7583" fg:w="84"/><text x="7.4144%" y="207.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (39 samples, 0.04%)</title><rect x="7.2437%" y="181" width="0.0368%" height="15" fill="rgb(212,68,19)" fg:x="7667" fg:w="39"/><text x="7.4937%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (301 samples, 0.28%)</title><rect x="7.2834%" y="181" width="0.2844%" height="15" fill="rgb(240,187,13)" fg:x="7709" fg:w="301"/><text x="7.5334%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (877 samples, 0.83%)</title><rect x="7.5829%" y="165" width="0.8286%" height="15" fill="rgb(223,113,26)" fg:x="8026" fg:w="877"/><text x="7.8329%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,969 samples, 1.86%)</title><rect x="8.4115%" y="165" width="1.8603%" height="15" fill="rgb(206,192,2)" fg:x="8903" fg:w="1969"/><text x="8.6615%" y="175.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (84 samples, 0.08%)</title><rect x="10.2718%" y="165" width="0.0794%" height="15" fill="rgb(241,108,4)" fg:x="10872" fg:w="84"/><text x="10.5218%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,454 samples, 1.37%)</title><rect x="10.3512%" y="165" width="1.3737%" height="15" fill="rgb(247,173,49)" fg:x="10956" fg:w="1454"/><text x="10.6012%" y="175.50"></text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.04%)</title><rect x="11.7249%" y="165" width="0.0406%" height="15" fill="rgb(224,114,35)" fg:x="12410" fg:w="43"/><text x="11.9749%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1,429 samples, 1.35%)</title><rect x="11.7655%" y="149" width="1.3501%" height="15" fill="rgb(245,159,27)" fg:x="12453" fg:w="1429"/><text x="12.0155%" y="159.50"></text></g><g><title>DYLD-STUB$$malloc (133 samples, 0.13%)</title><rect x="13.1157%" y="149" width="0.1257%" height="15" fill="rgb(245,172,44)" fg:x="13882" fg:w="133"/><text x="13.3657%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (290 samples, 0.27%)</title><rect x="13.2413%" y="149" width="0.2740%" height="15" fill="rgb(236,23,11)" fg:x="14015" fg:w="290"/><text x="13.4913%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (33 samples, 0.03%)</title><rect x="13.5153%" y="149" width="0.0312%" height="15" fill="rgb(205,117,38)" fg:x="14305" fg:w="33"/><text x="13.7653%" y="159.50"></text></g><g><title>_malloc_zone_malloc (930 samples, 0.88%)</title><rect x="13.5465%" y="149" width="0.8787%" height="15" fill="rgb(237,72,25)" fg:x="14338" fg:w="930"/><text x="13.7965%" y="159.50"></text></g><g><title>_xzm_xzone_malloc (956 samples, 0.90%)</title><rect x="14.4251%" y="149" width="0.9032%" height="15" fill="rgb(244,70,9)" fg:x="15268" fg:w="956"/><text x="14.6751%" y="159.50"></text></g><g><title>_xzm_xzone_malloc_tiny (3,102 samples, 2.93%)</title><rect x="15.3293%" y="149" width="2.9308%" height="15" fill="rgb(217,125,39)" fg:x="16225" fg:w="3102"/><text x="15.5793%" y="159.50">_x..</text></g><g><title>malloc (43 samples, 0.04%)</title><rect x="18.2601%" y="149" width="0.0406%" height="15" fill="rgb(235,36,10)" fg:x="19327" fg:w="43"/><text x="18.5101%" y="159.50"></text></g><g><title>alloc::alloc::alloc (6,927 samples, 6.54%)</title><rect x="11.7655%" y="165" width="6.5446%" height="15" fill="rgb(251,123,47)" fg:x="12453" fg:w="6927"/><text x="12.0155%" y="175.50">alloc::al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (5,144 samples, 4.86%)</title><rect x="18.3101%" y="165" width="4.8600%" height="15" fill="rgb(221,13,13)" fg:x="19380" fg:w="5144"/><text x="18.5601%" y="175.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (176 samples, 0.17%)</title><rect x="23.1702%" y="165" width="0.1663%" height="15" fill="rgb(238,131,9)" fg:x="24524" fg:w="176"/><text x="23.4202%" y="175.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (87 samples, 0.08%)</title><rect x="23.2543%" y="149" width="0.0822%" height="15" fill="rgb(211,50,8)" fg:x="24613" fg:w="87"/><text x="23.5043%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4,161 samples, 3.93%)</title><rect x="23.3365%" y="165" width="3.9313%" height="15" fill="rgb(245,182,24)" fg:x="24700" fg:w="4161"/><text x="23.5865%" y="175.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (14,256 samples, 13.47%)</title><rect x="27.2677%" y="165" width="13.4690%" height="15" fill="rgb(242,14,37)" fg:x="28861" fg:w="14256"/><text x="27.5177%" y="175.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>core::cmp::Ord::max (28 samples, 0.03%)</title><rect x="40.7368%" y="165" width="0.0265%" height="15" fill="rgb(246,228,12)" fg:x="43117" fg:w="28"/><text x="40.9868%" y="175.50"></text></g><g><title>core::intrinsics::unlikely (28 samples, 0.03%)</title><rect x="40.7632%" y="165" width="0.0265%" height="15" fill="rgb(213,55,15)" fg:x="43145" fg:w="28"/><text x="41.0132%" y="175.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::overflowing_mul (82 samples, 0.08%)</title><rect x="40.7897%" y="165" width="0.0775%" height="15" fill="rgb(209,9,3)" fg:x="43173" fg:w="82"/><text x="41.0397%" y="175.50"></text></g><g><title>core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7,059 samples, 6.67%)</title><rect x="40.8671%" y="165" width="6.6693%" height="15" fill="rgb(230,59,30)" fg:x="43255" fg:w="7059"/><text x="41.1171%" y="175.50">core::ops..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (18 samples, 0.02%)</title><rect x="47.5364%" y="165" width="0.0170%" height="15" fill="rgb(209,121,21)" fg:x="50314" fg:w="18"/><text x="47.7864%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (42,461 samples, 40.12%)</title><rect x="7.5678%" y="181" width="40.1170%" height="15" fill="rgb(220,109,13)" fg:x="8010" fg:w="42461"/><text x="7.8178%" y="191.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;..</text></g><g><title>core::ptr::write (139 samples, 0.13%)</title><rect x="47.5535%" y="165" width="0.1313%" height="15" fill="rgb(232,18,1)" fg:x="50332" fg:w="139"/><text x="47.8035%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (1,777 samples, 1.68%)</title><rect x="47.6848%" y="181" width="1.6789%" height="15" fill="rgb(215,41,42)" fg:x="50471" fg:w="1777"/><text x="47.9348%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (283 samples, 0.27%)</title><rect x="49.3637%" y="181" width="0.2674%" height="15" fill="rgb(224,123,36)" fg:x="52248" fg:w="283"/><text x="49.6137%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (1,139 samples, 1.08%)</title><rect x="49.6311%" y="181" width="1.0761%" height="15" fill="rgb(240,125,3)" fg:x="52531" fg:w="1139"/><text x="49.8811%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1,083 samples, 1.02%)</title><rect x="50.7072%" y="181" width="1.0232%" height="15" fill="rgb(205,98,50)" fg:x="53670" fg:w="1083"/><text x="50.9572%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (121 samples, 0.11%)</title><rect x="51.7304%" y="181" width="0.1143%" height="15" fill="rgb(205,185,37)" fg:x="54753" fg:w="121"/><text x="51.9804%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (90 samples, 0.09%)</title><rect x="51.8447%" y="181" width="0.0850%" height="15" fill="rgb(238,207,15)" fg:x="54874" fg:w="90"/><text x="52.0947%" y="191.50"></text></g><g><title>_xzm_free (241 samples, 0.23%)</title><rect x="51.9297%" y="181" width="0.2277%" height="15" fill="rgb(213,199,42)" fg:x="54964" fg:w="241"/><text x="52.1797%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1,433 samples, 1.35%)</title><rect x="52.1574%" y="165" width="1.3539%" height="15" fill="rgb(235,201,11)" fg:x="55205" fg:w="1433"/><text x="52.4074%" y="175.50"></text></g><g><title>DYLD-STUB$$malloc (205 samples, 0.19%)</title><rect x="53.5113%" y="165" width="0.1937%" height="15" fill="rgb(207,46,11)" fg:x="56638" fg:w="205"/><text x="53.7613%" y="175.50"></text></g><g><title>__rustc::__rdl_alloc (245 samples, 0.23%)</title><rect x="53.7050%" y="165" width="0.2315%" height="15" fill="rgb(241,35,35)" fg:x="56843" fg:w="245"/><text x="53.9550%" y="175.50"></text></g><g><title>_malloc_zone_malloc (741 samples, 0.70%)</title><rect x="53.9365%" y="165" width="0.7001%" height="15" fill="rgb(243,32,47)" fg:x="57088" fg:w="741"/><text x="54.1865%" y="175.50"></text></g><g><title>_xzm_xzone_malloc (820 samples, 0.77%)</title><rect x="54.6366%" y="165" width="0.7747%" height="15" fill="rgb(247,202,23)" fg:x="57829" fg:w="820"/><text x="54.8866%" y="175.50"></text></g><g><title>_xzm_xzone_malloc_tiny (3,175 samples, 3.00%)</title><rect x="55.4123%" y="165" width="2.9997%" height="15" fill="rgb(219,102,11)" fg:x="58650" fg:w="3175"/><text x="55.6623%" y="175.50">_xz..</text></g><g><title>malloc (21 samples, 0.02%)</title><rect x="58.4120%" y="165" width="0.0198%" height="15" fill="rgb(243,110,44)" fg:x="61825" fg:w="21"/><text x="58.6620%" y="175.50"></text></g><g><title>alloc::alloc::alloc (6,642 samples, 6.28%)</title><rect x="52.1574%" y="181" width="6.2753%" height="15" fill="rgb(222,74,54)" fg:x="55205" fg:w="6642"/><text x="52.4074%" y="191.50">alloc::a..</text></g><g><title>DYLD-STUB$$free (298 samples, 0.28%)</title><rect x="58.4592%" y="165" width="0.2815%" height="15" fill="rgb(216,99,12)" fg:x="61875" fg:w="298"/><text x="58.7092%" y="175.50"></text></g><g><title>__rustc::__rdl_dealloc (44 samples, 0.04%)</title><rect x="58.7408%" y="165" width="0.0416%" height="15" fill="rgb(226,22,26)" fg:x="62173" fg:w="44"/><text x="58.9908%" y="175.50"></text></g><g><title>__rustc::__rust_dealloc (16 samples, 0.02%)</title><rect x="58.7823%" y="165" width="0.0151%" height="15" fill="rgb(217,163,10)" fg:x="62217" fg:w="16"/><text x="59.0323%" y="175.50"></text></g><g><title>_free (1,159 samples, 1.10%)</title><rect x="58.7975%" y="165" width="1.0950%" height="15" fill="rgb(213,25,53)" fg:x="62233" fg:w="1159"/><text x="59.0475%" y="175.50"></text></g><g><title>DYLD-STUB$$mach_absolute_time (50 samples, 0.05%)</title><rect x="64.7043%" y="149" width="0.0472%" height="15" fill="rgb(252,105,26)" fg:x="68485" fg:w="50"/><text x="64.9543%" y="159.50"></text></g><g><title>_xzm_free (12,325 samples, 11.64%)</title><rect x="59.8925%" y="165" width="11.6446%" height="15" fill="rgb(220,39,43)" fg:x="63392" fg:w="12325"/><text x="60.1425%" y="175.50">_xzm_free</text></g><g><title>mach_absolute_time (7,182 samples, 6.79%)</title><rect x="64.7516%" y="149" width="6.7855%" height="15" fill="rgb(229,68,48)" fg:x="68535" fg:w="7182"/><text x="65.0016%" y="159.50">mach_abso..</text></g><g><title>free (79 samples, 0.07%)</title><rect x="71.5371%" y="165" width="0.0746%" height="15" fill="rgb(252,8,32)" fg:x="75717" fg:w="79"/><text x="71.7871%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (14,197 samples, 13.41%)</title><rect x="58.4328%" y="181" width="13.4133%" height="15" fill="rgb(223,20,43)" fg:x="61847" fg:w="14197"/><text x="58.6828%" y="191.50">alloc::alloc::dealloc</text></g><g><title>xzm_malloc_zone_try_free_default (248 samples, 0.23%)</title><rect x="71.6117%" y="165" width="0.2343%" height="15" fill="rgb(229,81,49)" fg:x="75796" fg:w="248"/><text x="71.8617%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (36 samples, 0.03%)</title><rect x="71.8460%" y="181" width="0.0340%" height="15" fill="rgb(236,28,36)" fg:x="76044" fg:w="36"/><text x="72.0960%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (209 samples, 0.20%)</title><rect x="71.8800%" y="181" width="0.1975%" height="15" fill="rgb(249,185,26)" fg:x="76080" fg:w="209"/><text x="72.1300%" y="191.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (97 samples, 0.09%)</title><rect x="71.9859%" y="165" width="0.0916%" height="15" fill="rgb(249,174,33)" fg:x="76192" fg:w="97"/><text x="72.2359%" y="175.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (115 samples, 0.11%)</title><rect x="72.0785%" y="181" width="0.1087%" height="15" fill="rgb(233,201,37)" fg:x="76290" fg:w="115"/><text x="72.3285%" y="191.50"></text></g><g><title>core::cmp::Ord::min (26 samples, 0.02%)</title><rect x="72.1871%" y="181" width="0.0246%" height="15" fill="rgb(221,78,26)" fg:x="76405" fg:w="26"/><text x="72.4371%" y="191.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::lt (288 samples, 0.27%)</title><rect x="72.2117%" y="181" width="0.2721%" height="15" fill="rgb(250,127,30)" fg:x="76431" fg:w="288"/><text x="72.4617%" y="191.50"></text></g><g><title>core::intrinsics::unlikely (91 samples, 0.09%)</title><rect x="72.4866%" y="181" width="0.0860%" height="15" fill="rgb(230,49,44)" fg:x="76722" fg:w="91"/><text x="72.7366%" y="191.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add (3,252 samples, 3.07%)</title><rect x="72.5726%" y="181" width="3.0725%" height="15" fill="rgb(229,67,23)" fg:x="76813" fg:w="3252"/><text x="72.8226%" y="191.50">cor..</text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_mul (28 samples, 0.03%)</title><rect x="75.6451%" y="181" width="0.0265%" height="15" fill="rgb(249,83,47)" fg:x="80065" fg:w="28"/><text x="75.8951%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::add (20 samples, 0.02%)</title><rect x="75.6715%" y="181" width="0.0189%" height="15" fill="rgb(215,43,3)" fg:x="80093" fg:w="20"/><text x="75.9215%" y="191.50"></text></g><g><title>core::ptr::write (1,255 samples, 1.19%)</title><rect x="75.6904%" y="181" width="1.1857%" height="15" fill="rgb(238,154,13)" fg:x="80113" fg:w="1255"/><text x="75.9404%" y="191.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::binary_search_by (623 samples, 0.59%)</title><rect x="76.8761%" y="181" width="0.5886%" height="15" fill="rgb(219,56,2)" fg:x="81368" fg:w="623"/><text x="77.1261%" y="191.50"></text></g><g><title>interp::intercepts::_{{closure}} (2,356 samples, 2.23%)</title><rect x="77.4647%" y="181" width="2.2259%" height="15" fill="rgb(233,0,4)" fg:x="81991" fg:w="2356"/><text x="77.7147%" y="191.50">i..</text></g><g><title>interp::interp (379 samples, 0.36%)</title><rect x="79.6907%" y="181" width="0.3581%" height="15" fill="rgb(235,30,7)" fg:x="84347" fg:w="379"/><text x="79.9407%" y="191.50"></text></g><g><title>randoms::main::_{{closure}} (77,098 samples, 72.84%)</title><rect x="7.2437%" y="197" width="72.8419%" height="15" fill="rgb(250,79,13)" fg:x="7667" fg:w="77098"/><text x="7.4937%" y="207.50">randoms::main::_{{closure}}</text></g><g><title>interp::select_outside_point (39 samples, 0.04%)</title><rect x="80.0488%" y="181" width="0.0368%" height="15" fill="rgb(211,146,34)" fg:x="84726" fg:w="39"/><text x="80.2988%" y="191.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialOrd for f64&gt;::partial_cmp (535 samples, 0.51%)</title><rect x="80.0856%" y="181" width="0.5055%" height="15" fill="rgb(228,22,38)" fg:x="84765" fg:w="535"/><text x="80.3356%" y="191.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::binary_search_by (667 samples, 0.63%)</title><rect x="80.5911%" y="181" width="0.6302%" height="15" fill="rgb(235,168,5)" fg:x="85300" fg:w="667"/><text x="80.8411%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (83,863 samples, 79.23%)</title><rect x="2.0266%" y="213" width="79.2334%" height="15" fill="rgb(221,155,16)" fg:x="2145" fg:w="83863"/><text x="2.2766%" y="223.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>randoms::populate_volume::_{{closure}} (1,243 samples, 1.17%)</title><rect x="80.0856%" y="197" width="1.1744%" height="15" fill="rgb(215,215,53)" fg:x="84765" fg:w="1243"/><text x="80.3356%" y="207.50"></text></g><g><title>randoms::inverse_interp_binary (41 samples, 0.04%)</title><rect x="81.2212%" y="181" width="0.0387%" height="15" fill="rgb(223,4,10)" fg:x="85967" fg:w="41"/><text x="81.4712%" y="191.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (143 samples, 0.14%)</title><rect x="81.2619%" y="213" width="0.1351%" height="15" fill="rgb(234,103,6)" fg:x="86010" fg:w="143"/><text x="81.5119%" y="223.50"></text></g><g><title>&lt;rand_distr::normal::StandardNormal as rand::distr::distribution::Distribution&lt;f64&gt;&gt;::sample (191 samples, 0.18%)</title><rect x="81.3970%" y="213" width="0.1805%" height="15" fill="rgb(227,97,0)" fg:x="86153" fg:w="191"/><text x="81.6470%" y="223.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (3,735 samples, 3.53%)</title><rect x="81.5774%" y="213" width="3.5288%" height="15" fill="rgb(234,150,53)" fg:x="86344" fg:w="3735"/><text x="81.8274%" y="223.50">&lt;st..</text></g><g><title>close (3,735 samples, 3.53%)</title><rect x="81.5774%" y="197" width="3.5288%" height="15" fill="rgb(228,201,54)" fg:x="86344" fg:w="3735"/><text x="81.8274%" y="207.50">clo..</text></g><g><title>_platform_memset (21 samples, 0.02%)</title><rect x="85.1251%" y="197" width="0.0198%" height="15" fill="rgb(222,22,37)" fg:x="90099" fg:w="21"/><text x="85.3751%" y="207.50"></text></g><g><title>alloc::alloc::alloc_zeroed (46 samples, 0.04%)</title><rect x="85.1147%" y="213" width="0.0435%" height="15" fill="rgb(237,53,32)" fg:x="90088" fg:w="46"/><text x="85.3647%" y="223.50"></text></g><g><title>_free (18 samples, 0.02%)</title><rect x="85.1658%" y="197" width="0.0170%" height="15" fill="rgb(233,25,53)" fg:x="90142" fg:w="18"/><text x="85.4158%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (16 samples, 0.02%)</title><rect x="85.2546%" y="181" width="0.0151%" height="15" fill="rgb(210,40,34)" fg:x="90236" fg:w="16"/><text x="85.5046%" y="191.50"></text></g><g><title>_platform_memset (41 samples, 0.04%)</title><rect x="85.2754%" y="181" width="0.0387%" height="15" fill="rgb(241,220,44)" fg:x="90258" fg:w="41"/><text x="85.5254%" y="191.50"></text></g><g><title>_xzm_free (146 samples, 0.14%)</title><rect x="85.1828%" y="197" width="0.1379%" height="15" fill="rgb(235,28,35)" fg:x="90160" fg:w="146"/><text x="85.4328%" y="207.50"></text></g><g><title>_xzm_xzone_free_freelist (17 samples, 0.02%)</title><rect x="85.3245%" y="197" width="0.0161%" height="15" fill="rgb(210,56,17)" fg:x="90310" fg:w="17"/><text x="85.5745%" y="207.50"></text></g><g><title>mach_absolute_time (13 samples, 0.01%)</title><rect x="85.3283%" y="181" width="0.0123%" height="15" fill="rgb(224,130,29)" fg:x="90314" fg:w="13"/><text x="85.5783%" y="191.50"></text></g><g><title>_xzm_segment_group_segment_span_free_coalesce (18 samples, 0.02%)</title><rect x="85.3481%" y="181" width="0.0170%" height="15" fill="rgb(235,212,8)" fg:x="90335" fg:w="18"/><text x="85.5981%" y="191.50"></text></g><g><title>_xzm_segment_group_span_mark_used (16 samples, 0.02%)</title><rect x="85.3500%" y="165" width="0.0151%" height="15" fill="rgb(223,33,50)" fg:x="90337" fg:w="16"/><text x="85.6000%" y="175.50"></text></g><g><title>_xzm_reclaim_mark_used (14 samples, 0.01%)</title><rect x="85.3519%" y="149" width="0.0132%" height="15" fill="rgb(219,149,13)" fg:x="90339" fg:w="14"/><text x="85.6019%" y="159.50"></text></g><g><title>mach_vm_reclaim_update_kernel_accounting (13 samples, 0.01%)</title><rect x="85.3528%" y="133" width="0.0123%" height="15" fill="rgb(250,156,29)" fg:x="90340" fg:w="13"/><text x="85.6028%" y="143.50"></text></g><g><title>mach_vm_reclaim_update_kernel_accounting_trap (12 samples, 0.01%)</title><rect x="85.3538%" y="117" width="0.0113%" height="15" fill="rgb(216,193,19)" fg:x="90341" fg:w="12"/><text x="85.6038%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (226 samples, 0.21%)</title><rect x="85.1582%" y="213" width="0.2135%" height="15" fill="rgb(216,135,14)" fg:x="90134" fg:w="226"/><text x="85.4082%" y="223.50"></text></g><g><title>xzm_segment_group_free_chunk (27 samples, 0.03%)</title><rect x="85.3462%" y="197" width="0.0255%" height="15" fill="rgb(241,47,5)" fg:x="90333" fg:w="27"/><text x="85.5962%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (61 samples, 0.06%)</title><rect x="85.3736%" y="213" width="0.0576%" height="15" fill="rgb(233,42,35)" fg:x="90362" fg:w="61"/><text x="85.6236%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (22 samples, 0.02%)</title><rect x="85.4313%" y="213" width="0.0208%" height="15" fill="rgb(231,13,6)" fg:x="90423" fg:w="22"/><text x="85.6813%" y="223.50"></text></g><g><title>_platform_memmove (98 samples, 0.09%)</title><rect x="85.6731%" y="117" width="0.0926%" height="15" fill="rgb(207,181,40)" fg:x="90679" fg:w="98"/><text x="85.9231%" y="127.50"></text></g><g><title>_xzm_free (53 samples, 0.05%)</title><rect x="85.7657%" y="117" width="0.0501%" height="15" fill="rgb(254,173,49)" fg:x="90777" fg:w="53"/><text x="86.0157%" y="127.50"></text></g><g><title>mach_absolute_time (24 samples, 0.02%)</title><rect x="85.7931%" y="101" width="0.0227%" height="15" fill="rgb(221,1,38)" fg:x="90806" fg:w="24"/><text x="86.0431%" y="111.50"></text></g><g><title>mach_vm_reclaim_update_kernel_accounting (16 samples, 0.02%)</title><rect x="85.8233%" y="53" width="0.0151%" height="15" fill="rgb(206,124,46)" fg:x="90838" fg:w="16"/><text x="86.0733%" y="63.50"></text></g><g><title>mach_vm_reclaim_update_kernel_accounting_trap (16 samples, 0.02%)</title><rect x="85.8233%" y="37" width="0.0151%" height="15" fill="rgb(249,21,11)" fg:x="90838" fg:w="16"/><text x="86.0733%" y="47.50"></text></g><g><title>_xzm_malloc_large_huge (24 samples, 0.02%)</title><rect x="85.8177%" y="117" width="0.0227%" height="15" fill="rgb(222,201,40)" fg:x="90832" fg:w="24"/><text x="86.0677%" y="127.50"></text></g><g><title>xzm_segment_group_alloc_chunk (24 samples, 0.02%)</title><rect x="85.8177%" y="101" width="0.0227%" height="15" fill="rgb(235,61,29)" fg:x="90832" fg:w="24"/><text x="86.0677%" y="111.50"></text></g><g><title>_xzm_segment_group_find_and_allocate_chunk (24 samples, 0.02%)</title><rect x="85.8177%" y="85" width="0.0227%" height="15" fill="rgb(219,207,3)" fg:x="90832" fg:w="24"/><text x="86.0677%" y="95.50"></text></g><g><title>_xzm_segment_group_span_mark_smaller (23 samples, 0.02%)</title><rect x="85.8186%" y="69" width="0.0217%" height="15" fill="rgb(222,56,46)" fg:x="90833" fg:w="23"/><text x="86.0686%" y="79.50"></text></g><g><title>_xzm_xzone_find_and_malloc_from_freelist_chunk (13 samples, 0.01%)</title><rect x="85.8498%" y="101" width="0.0123%" height="15" fill="rgb(239,76,54)" fg:x="90866" fg:w="13"/><text x="86.0998%" y="111.50"></text></g><g><title>_xzm_xzone_malloc_freelist_outlined (17 samples, 0.02%)</title><rect x="85.8470%" y="117" width="0.0161%" height="15" fill="rgb(231,124,27)" fg:x="90863" fg:w="17"/><text x="86.0970%" y="127.50"></text></g><g><title>_malloc_zone_realloc (273 samples, 0.26%)</title><rect x="85.6278%" y="149" width="0.2579%" height="15" fill="rgb(249,195,6)" fg:x="90631" fg:w="273"/><text x="85.8778%" y="159.50"></text></g><g><title>xzm_realloc (261 samples, 0.25%)</title><rect x="85.6391%" y="133" width="0.2466%" height="15" fill="rgb(237,174,47)" fg:x="90643" fg:w="261"/><text x="85.8891%" y="143.50"></text></g><g><title>_xzm_xzone_malloc_tiny (22 samples, 0.02%)</title><rect x="85.8649%" y="117" width="0.0208%" height="15" fill="rgb(206,201,31)" fg:x="90882" fg:w="22"/><text x="86.1149%" y="127.50"></text></g><g><title>xzm_malloc_zone_size (21 samples, 0.02%)</title><rect x="85.8857%" y="149" width="0.0198%" height="15" fill="rgb(231,57,52)" fg:x="90904" fg:w="21"/><text x="86.1357%" y="159.50"></text></g><g><title>_realloc (306 samples, 0.29%)</title><rect x="85.6183%" y="165" width="0.2891%" height="15" fill="rgb(248,177,22)" fg:x="90621" fg:w="306"/><text x="85.8683%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (351 samples, 0.33%)</title><rect x="85.5796%" y="197" width="0.3316%" height="15" fill="rgb(215,211,37)" fg:x="90580" fg:w="351"/><text x="85.8296%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (327 samples, 0.31%)</title><rect x="85.6023%" y="181" width="0.3089%" height="15" fill="rgb(241,128,51)" fg:x="90604" fg:w="327"/><text x="85.8523%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (13 samples, 0.01%)</title><rect x="85.9112%" y="197" width="0.0123%" height="15" fill="rgb(227,165,31)" fg:x="90931" fg:w="13"/><text x="86.1612%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (29 samples, 0.03%)</title><rect x="85.9254%" y="197" width="0.0274%" height="15" fill="rgb(228,167,24)" fg:x="90946" fg:w="29"/><text x="86.1754%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (536 samples, 0.51%)</title><rect x="85.4530%" y="213" width="0.5064%" height="15" fill="rgb(228,143,12)" fg:x="90446" fg:w="536"/><text x="85.7030%" y="223.50"></text></g><g><title>core::ptr::read (28 samples, 0.03%)</title><rect x="85.9726%" y="213" width="0.0265%" height="15" fill="rgb(249,149,8)" fg:x="90996" fg:w="28"/><text x="86.2226%" y="223.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1,175 samples, 1.11%)</title><rect x="86.0019%" y="181" width="1.1101%" height="15" fill="rgb(243,35,44)" fg:x="91027" fg:w="1175"/><text x="86.2519%" y="191.50"></text></g><g><title>write (1,173 samples, 1.11%)</title><rect x="86.0038%" y="165" width="1.1082%" height="15" fill="rgb(246,89,9)" fg:x="91029" fg:w="1173"/><text x="86.2538%" y="175.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::flush_buf (1,177 samples, 1.11%)</title><rect x="86.0010%" y="213" width="1.1120%" height="15" fill="rgb(233,213,13)" fg:x="91026" fg:w="1177"/><text x="86.2510%" y="223.50"></text></g><g><title>std::io::Write::write_all (1,177 samples, 1.11%)</title><rect x="86.0010%" y="197" width="1.1120%" height="15" fill="rgb(233,141,41)" fg:x="91026" fg:w="1177"/><text x="86.2510%" y="207.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (297 samples, 0.28%)</title><rect x="88.8741%" y="197" width="0.2806%" height="15" fill="rgb(239,167,4)" fg:x="94067" fg:w="297"/><text x="89.1241%" y="207.50"></text></g><g><title>&lt;rand_distr::normal::StandardNormal as rand::distr::distribution::Distribution&lt;f64&gt;&gt;::sample (128 samples, 0.12%)</title><rect x="89.1547%" y="197" width="0.1209%" height="15" fill="rgb(209,217,16)" fg:x="94364" fg:w="128"/><text x="89.4047%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (231 samples, 0.22%)</title><rect x="89.2860%" y="197" width="0.2182%" height="15" fill="rgb(219,88,35)" fg:x="94503" fg:w="231"/><text x="89.5360%" y="207.50"></text></g><g><title>core::mem::replace (44 samples, 0.04%)</title><rect x="89.5052%" y="197" width="0.0416%" height="15" fill="rgb(220,193,23)" fg:x="94735" fg:w="44"/><text x="89.7552%" y="207.50"></text></g><g><title>&lt;rand::rngs::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (13 samples, 0.01%)</title><rect x="89.5468%" y="181" width="0.0123%" height="15" fill="rgb(230,90,52)" fg:x="94779" fg:w="13"/><text x="89.7968%" y="191.50"></text></g><g><title>rand::rngs::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (39 samples, 0.04%)</title><rect x="89.5628%" y="181" width="0.0368%" height="15" fill="rgb(252,106,19)" fg:x="94796" fg:w="39"/><text x="89.8128%" y="191.50"></text></g><g><title>getentropy (39 samples, 0.04%)</title><rect x="89.5628%" y="165" width="0.0368%" height="15" fill="rgb(206,74,20)" fg:x="94796" fg:w="39"/><text x="89.8128%" y="175.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (77 samples, 0.07%)</title><rect x="89.5468%" y="197" width="0.0727%" height="15" fill="rgb(230,138,44)" fg:x="94779" fg:w="77"/><text x="89.7968%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (21 samples, 0.02%)</title><rect x="89.5997%" y="181" width="0.0198%" height="15" fill="rgb(235,182,43)" fg:x="94835" fg:w="21"/><text x="89.8497%" y="191.50"></text></g><g><title>rand_distr::utils::ziggurat (247 samples, 0.23%)</title><rect x="89.6195%" y="197" width="0.2334%" height="15" fill="rgb(242,16,51)" fg:x="94856" fg:w="247"/><text x="89.8695%" y="207.50"></text></g><g><title>randoms::populate_volume (260 samples, 0.25%)</title><rect x="89.8529%" y="197" width="0.2456%" height="15" fill="rgb(248,9,4)" fg:x="95103" fg:w="260"/><text x="90.1029%" y="207.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::exp (12 samples, 0.01%)</title><rect x="90.0985%" y="197" width="0.0113%" height="15" fill="rgb(210,31,22)" fg:x="95363" fg:w="12"/><text x="90.3485%" y="207.50"></text></g><g><title>rand::rng::Rng::sample (3,167 samples, 2.99%)</title><rect x="87.1196%" y="213" width="2.9922%" height="15" fill="rgb(239,54,39)" fg:x="92210" fg:w="3167"/><text x="87.3696%" y="223.50">ran..</text></g><g><title>csv::writer::Buffer::written (11 samples, 0.01%)</title><rect x="90.1288%" y="197" width="0.0104%" height="15" fill="rgb(230,99,41)" fg:x="95395" fg:w="11"/><text x="90.3788%" y="207.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::write_field_impl (151 samples, 0.14%)</title><rect x="90.1458%" y="197" width="0.1427%" height="15" fill="rgb(253,106,12)" fg:x="95413" fg:w="151"/><text x="90.3958%" y="207.50"></text></g><g><title>csv_core::writer::Writer::field (148 samples, 0.14%)</title><rect x="90.1486%" y="181" width="0.1398%" height="15" fill="rgb(213,46,41)" fg:x="95416" fg:w="148"/><text x="90.3986%" y="191.50"></text></g><g><title>_platform_memmove (20 samples, 0.02%)</title><rect x="90.2696%" y="165" width="0.0189%" height="15" fill="rgb(215,133,35)" fg:x="95544" fg:w="20"/><text x="90.5196%" y="175.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::write_terminator (12 samples, 0.01%)</title><rect x="90.2922%" y="197" width="0.0113%" height="15" fill="rgb(213,28,5)" fg:x="95568" fg:w="12"/><text x="90.5422%" y="207.50"></text></g><g><title>csv_core::writer::Writer::terminator (11 samples, 0.01%)</title><rect x="90.2932%" y="181" width="0.0104%" height="15" fill="rgb(215,77,49)" fg:x="95569" fg:w="11"/><text x="90.5432%" y="191.50"></text></g><g><title>randoms::calculate_v_dc_max (204 samples, 0.19%)</title><rect x="90.1184%" y="213" width="0.1927%" height="15" fill="rgb(248,100,22)" fg:x="95384" fg:w="204"/><text x="90.3684%" y="223.50"></text></g><g><title>randoms::cosmology::Cosmology::comoving_volume (75 samples, 0.07%)</title><rect x="90.3111%" y="213" width="0.0709%" height="15" fill="rgb(208,67,9)" fg:x="95588" fg:w="75"/><text x="90.5611%" y="223.50"></text></g><g><title>randoms::histogram::arange (14 samples, 0.01%)</title><rect x="90.3820%" y="213" width="0.0132%" height="15" fill="rgb(219,133,21)" fg:x="95663" fg:w="14"/><text x="90.6320%" y="223.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (28 samples, 0.03%)</title><rect x="90.4028%" y="181" width="0.0265%" height="15" fill="rgb(246,46,29)" fg:x="95685" fg:w="28"/><text x="90.6528%" y="191.50"></text></g><g><title>DYLD-STUB$$memset_pattern16 (13 samples, 0.01%)</title><rect x="90.4292%" y="165" width="0.0123%" height="15" fill="rgb(246,185,52)" fg:x="95713" fg:w="13"/><text x="90.6792%" y="175.50"></text></g><g><title>_platform_memset_pattern16 (167 samples, 0.16%)</title><rect x="90.4415%" y="165" width="0.1578%" height="15" fill="rgb(252,136,11)" fg:x="95726" fg:w="167"/><text x="90.6915%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (197 samples, 0.19%)</title><rect x="90.4292%" y="181" width="0.1861%" height="15" fill="rgb(219,138,53)" fg:x="95713" fg:w="197"/><text x="90.6792%" y="191.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (17 samples, 0.02%)</title><rect x="90.5993%" y="165" width="0.0161%" height="15" fill="rgb(211,51,23)" fg:x="95893" fg:w="17"/><text x="90.8493%" y="175.50"></text></g><g><title>_free (34 samples, 0.03%)</title><rect x="90.6153%" y="181" width="0.0321%" height="15" fill="rgb(247,221,28)" fg:x="95910" fg:w="34"/><text x="90.8653%" y="191.50"></text></g><g><title>_malloc_zone_malloc (21 samples, 0.02%)</title><rect x="90.6475%" y="181" width="0.0198%" height="15" fill="rgb(251,222,45)" fg:x="95944" fg:w="21"/><text x="90.8975%" y="191.50"></text></g><g><title>_xzm_free (125 samples, 0.12%)</title><rect x="90.6739%" y="181" width="0.1181%" height="15" fill="rgb(217,162,53)" fg:x="95972" fg:w="125"/><text x="90.9239%" y="191.50"></text></g><g><title>_xzm_xzone_malloc (21 samples, 0.02%)</title><rect x="90.7920%" y="181" width="0.0198%" height="15" fill="rgb(229,93,14)" fg:x="96097" fg:w="21"/><text x="91.0420%" y="191.50"></text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (81 samples, 0.08%)</title><rect x="90.8119%" y="165" width="0.0765%" height="15" fill="rgb(209,67,49)" fg:x="96118" fg:w="81"/><text x="91.0619%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (87 samples, 0.08%)</title><rect x="90.8119%" y="181" width="0.0822%" height="15" fill="rgb(213,87,29)" fg:x="96118" fg:w="87"/><text x="91.0619%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (241 samples, 0.23%)</title><rect x="90.8941%" y="165" width="0.2277%" height="15" fill="rgb(205,151,52)" fg:x="96205" fg:w="241"/><text x="91.1441%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (146 samples, 0.14%)</title><rect x="91.1218%" y="165" width="0.1379%" height="15" fill="rgb(253,215,39)" fg:x="96446" fg:w="146"/><text x="91.3718%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (12 samples, 0.01%)</title><rect x="91.2597%" y="165" width="0.0113%" height="15" fill="rgb(221,220,41)" fg:x="96592" fg:w="12"/><text x="91.5097%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (92 samples, 0.09%)</title><rect x="91.2710%" y="165" width="0.0869%" height="15" fill="rgb(218,133,21)" fg:x="96604" fg:w="92"/><text x="91.5210%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (133 samples, 0.13%)</title><rect x="91.3580%" y="165" width="0.1257%" height="15" fill="rgb(221,193,43)" fg:x="96696" fg:w="133"/><text x="91.6080%" y="175.50"></text></g><g><title>DYLD-STUB$$malloc (60 samples, 0.06%)</title><rect x="91.4855%" y="165" width="0.0567%" height="15" fill="rgb(240,128,52)" fg:x="96831" fg:w="60"/><text x="91.7355%" y="175.50"></text></g><g><title>__rustc::__rdl_alloc (66 samples, 0.06%)</title><rect x="91.5422%" y="165" width="0.0624%" height="15" fill="rgb(253,114,12)" fg:x="96891" fg:w="66"/><text x="91.7922%" y="175.50"></text></g><g><title>_malloc_zone_malloc (385 samples, 0.36%)</title><rect x="91.6055%" y="165" width="0.3637%" height="15" fill="rgb(215,223,47)" fg:x="96958" fg:w="385"/><text x="91.8555%" y="175.50"></text></g><g><title>_xzm_xzone_malloc (335 samples, 0.32%)</title><rect x="91.9692%" y="165" width="0.3165%" height="15" fill="rgb(248,225,23)" fg:x="97343" fg:w="335"/><text x="92.2192%" y="175.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (42 samples, 0.04%)</title><rect x="92.2886%" y="165" width="0.0397%" height="15" fill="rgb(250,108,0)" fg:x="97681" fg:w="42"/><text x="92.5386%" y="175.50"></text></g><g><title>core::f64::math::powi (18 samples, 0.02%)</title><rect x="92.3283%" y="165" width="0.0170%" height="15" fill="rgb(228,208,7)" fg:x="97723" fg:w="18"/><text x="92.5783%" y="175.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (59 samples, 0.06%)</title><rect x="92.3453%" y="165" width="0.0557%" height="15" fill="rgb(244,45,10)" fg:x="97741" fg:w="59"/><text x="92.5953%" y="175.50"></text></g><g><title>integrate::utils::adaptive_simpson::simpson_rule_update (23 samples, 0.02%)</title><rect x="92.4010%" y="165" width="0.0217%" height="15" fill="rgb(207,125,25)" fg:x="97800" fg:w="23"/><text x="92.6510%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1,761 samples, 1.66%)</title><rect x="90.8941%" y="181" width="1.6638%" height="15" fill="rgb(210,195,18)" fg:x="96205" fg:w="1761"/><text x="91.1441%" y="191.50"></text></g><g><title>randoms::cosmology::Cosmology::e_func (143 samples, 0.14%)</title><rect x="92.4227%" y="165" width="0.1351%" height="15" fill="rgb(249,80,12)" fg:x="97823" fg:w="143"/><text x="92.6727%" y="175.50"></text></g><g><title>DYLD-STUB$$free (19 samples, 0.02%)</title><rect x="92.5645%" y="165" width="0.0180%" height="15" fill="rgb(221,65,9)" fg:x="97973" fg:w="19"/><text x="92.8145%" y="175.50"></text></g><g><title>__rustc::__rust_dealloc (20 samples, 0.02%)</title><rect x="92.5824%" y="165" width="0.0189%" height="15" fill="rgb(235,49,36)" fg:x="97992" fg:w="20"/><text x="92.8324%" y="175.50"></text></g><g><title>_free (82 samples, 0.08%)</title><rect x="92.6013%" y="165" width="0.0775%" height="15" fill="rgb(225,32,20)" fg:x="98012" fg:w="82"/><text x="92.8513%" y="175.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (19 samples, 0.02%)</title><rect x="92.8696%" y="149" width="0.0180%" height="15" fill="rgb(215,141,46)" fg:x="98296" fg:w="19"/><text x="93.1196%" y="159.50"></text></g><g><title>__bzero (17 samples, 0.02%)</title><rect x="92.8876%" y="149" width="0.0161%" height="15" fill="rgb(250,160,47)" fg:x="98315" fg:w="17"/><text x="93.1376%" y="159.50"></text></g><g><title>_xzm_free (247 samples, 0.23%)</title><rect x="92.6807%" y="165" width="0.2334%" height="15" fill="rgb(216,222,40)" fg:x="98096" fg:w="247"/><text x="92.9307%" y="175.50"></text></g><g><title>_platform_memset (11 samples, 0.01%)</title><rect x="92.9036%" y="149" width="0.0104%" height="15" fill="rgb(234,217,39)" fg:x="98332" fg:w="11"/><text x="93.1536%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (398 samples, 0.38%)</title><rect x="92.5578%" y="181" width="0.3760%" height="15" fill="rgb(207,178,40)" fg:x="97966" fg:w="398"/><text x="92.8078%" y="191.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (21 samples, 0.02%)</title><rect x="92.9140%" y="165" width="0.0198%" height="15" fill="rgb(221,136,13)" fg:x="98343" fg:w="21"/><text x="93.1640%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (62 samples, 0.06%)</title><rect x="93.0246%" y="165" width="0.0586%" height="15" fill="rgb(249,199,10)" fg:x="98460" fg:w="62"/><text x="93.2746%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (11 samples, 0.01%)</title><rect x="93.0832%" y="165" width="0.0104%" height="15" fill="rgb(249,222,13)" fg:x="98522" fg:w="11"/><text x="93.3332%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (49 samples, 0.05%)</title><rect x="93.0935%" y="165" width="0.0463%" height="15" fill="rgb(244,185,38)" fg:x="98533" fg:w="49"/><text x="93.3435%" y="175.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (19 samples, 0.02%)</title><rect x="93.1398%" y="165" width="0.0180%" height="15" fill="rgb(236,202,9)" fg:x="98582" fg:w="19"/><text x="93.3898%" y="175.50"></text></g><g><title>DYLD-STUB$$free (110 samples, 0.10%)</title><rect x="93.1587%" y="165" width="0.1039%" height="15" fill="rgb(250,229,37)" fg:x="98602" fg:w="110"/><text x="93.4087%" y="175.50"></text></g><g><title>_free (336 samples, 0.32%)</title><rect x="93.2702%" y="165" width="0.3175%" height="15" fill="rgb(206,174,23)" fg:x="98720" fg:w="336"/><text x="93.5202%" y="175.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (41 samples, 0.04%)</title><rect x="94.2717%" y="149" width="0.0387%" height="15" fill="rgb(211,33,43)" fg:x="99780" fg:w="41"/><text x="94.5217%" y="159.50"></text></g><g><title>__bzero (45 samples, 0.04%)</title><rect x="94.3104%" y="149" width="0.0425%" height="15" fill="rgb(245,58,50)" fg:x="99821" fg:w="45"/><text x="94.5604%" y="159.50"></text></g><g><title>_xzm_free (829 samples, 0.78%)</title><rect x="93.5886%" y="165" width="0.7832%" height="15" fill="rgb(244,68,36)" fg:x="99057" fg:w="829"/><text x="93.8386%" y="175.50"></text></g><g><title>_platform_memset (20 samples, 0.02%)</title><rect x="94.3530%" y="149" width="0.0189%" height="15" fill="rgb(232,229,15)" fg:x="99866" fg:w="20"/><text x="94.6030%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.03%)</title><rect x="94.3719%" y="165" width="0.0293%" height="15" fill="rgb(254,30,23)" fg:x="99886" fg:w="31"/><text x="94.6219%" y="175.50"></text></g><g><title>core::f64::math::powi (11 samples, 0.01%)</title><rect x="94.4011%" y="165" width="0.0104%" height="15" fill="rgb(235,160,14)" fg:x="99917" fg:w="11"/><text x="94.6511%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;integrate::utils::adaptive_simpson::SubInterval&lt;f64&gt;&gt;&gt;&gt; (32 samples, 0.03%)</title><rect x="94.4163%" y="165" width="0.0302%" height="15" fill="rgb(212,155,44)" fg:x="99933" fg:w="32"/><text x="94.6663%" y="175.50"></text></g><g><title>free (14 samples, 0.01%)</title><rect x="94.4465%" y="165" width="0.0132%" height="15" fill="rgb(226,2,50)" fg:x="99965" fg:w="14"/><text x="94.6965%" y="175.50"></text></g><g><title>integrate::adaptive_quadrature::adaptive_simpson_method (1,656 samples, 1.56%)</title><rect x="92.9358%" y="181" width="1.5646%" height="15" fill="rgb(234,177,6)" fg:x="98366" fg:w="1656"/><text x="93.1858%" y="191.50"></text></g><g><title>randoms::cosmology::Cosmology::e_func (30 samples, 0.03%)</title><rect x="94.4720%" y="165" width="0.0283%" height="15" fill="rgb(217,24,9)" fg:x="99992" fg:w="30"/><text x="94.7220%" y="175.50"></text></g><g><title>randoms::cosmology::Cosmology::comoving_distance (4,372 samples, 4.13%)</title><rect x="90.4018%" y="197" width="4.1306%" height="15" fill="rgb(220,13,46)" fg:x="95684" fg:w="4372"/><text x="90.6518%" y="207.50">rando..</text></g><g><title>randoms::cosmology::Cosmology::comoving_distance (34 samples, 0.03%)</title><rect x="94.5003%" y="181" width="0.0321%" height="15" fill="rgb(239,221,27)" fg:x="100022" fg:w="34"/><text x="94.7503%" y="191.50"></text></g><g><title>randoms::cosmology::Cosmology::e_func (34 samples, 0.03%)</title><rect x="94.5003%" y="165" width="0.0321%" height="15" fill="rgb(222,198,25)" fg:x="100022" fg:w="34"/><text x="94.7503%" y="175.50"></text></g><g><title>randoms::populate_volume::_{{closure}} (4,461 samples, 4.21%)</title><rect x="90.3952%" y="213" width="4.2147%" height="15" fill="rgb(211,99,13)" fg:x="95677" fg:w="4461"/><text x="90.6452%" y="223.50">rando..</text></g><g><title>randoms::cosmology::Cosmology::comoving_volume (82 samples, 0.08%)</title><rect x="94.5325%" y="197" width="0.0775%" height="15" fill="rgb(232,111,31)" fg:x="100056" fg:w="82"/><text x="94.7825%" y="207.50"></text></g><g><title>rand::rngs::thread::rng (343 samples, 0.32%)</title><rect x="94.6175%" y="197" width="0.3241%" height="15" fill="rgb(245,82,37)" fg:x="100146" fg:w="343"/><text x="94.8675%" y="207.50"></text></g><g><title>_tlv_get_addr (114 samples, 0.11%)</title><rect x="94.8339%" y="181" width="0.1077%" height="15" fill="rgb(227,149,46)" fg:x="100375" fg:w="114"/><text x="95.0839%" y="191.50"></text></g><g><title>randoms::populate_volume (360 samples, 0.34%)</title><rect x="94.6099%" y="213" width="0.3401%" height="15" fill="rgb(218,36,50)" fg:x="100138" fg:w="360"/><text x="94.8599%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (105,404 samples, 99.59%)</title><rect x="0.0085%" y="245" width="99.5852%" height="15" fill="rgb(226,80,48)" fg:x="9" fg:w="105404"/><text x="0.2585%" y="255.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>randoms::main::_{{closure}} (104,734 samples, 98.95%)</title><rect x="0.6415%" y="229" width="98.9522%" height="15" fill="rgb(238,224,15)" fg:x="679" fg:w="104734"/><text x="0.8915%" y="239.50">randoms::main::_{{closure}}</text></g><g><title>std::fs::OpenOptions::open (4,915 samples, 4.64%)</title><rect x="94.9501%" y="213" width="4.6437%" height="15" fill="rgb(241,136,10)" fg:x="100498" fg:w="4915"/><text x="95.2001%" y="223.50">std::..</text></g><g><title>std::fs::OpenOptions::_open (4,915 samples, 4.64%)</title><rect x="94.9501%" y="197" width="4.6437%" height="15" fill="rgb(208,32,45)" fg:x="100498" fg:w="4915"/><text x="95.2001%" y="207.50">std::..</text></g><g><title>open (4,898 samples, 4.63%)</title><rect x="94.9661%" y="181" width="4.6276%" height="15" fill="rgb(207,135,9)" fg:x="100515" fg:w="4898"/><text x="95.2161%" y="191.50">open</text></g><g><title>__open (4,894 samples, 4.62%)</title><rect x="94.9699%" y="165" width="4.6238%" height="15" fill="rgb(206,86,44)" fg:x="100519" fg:w="4894"/><text x="95.2199%" y="175.50">__open</text></g><g><title>core::ptr::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="99.5937%" y="245" width="0.0123%" height="15" fill="rgb(245,177,15)" fg:x="105413" fg:w="13"/><text x="99.8437%" y="255.50"></text></g><g><title>_platform_memmove (13 samples, 0.01%)</title><rect x="99.5937%" y="229" width="0.0123%" height="15" fill="rgb(206,64,50)" fg:x="105413" fg:w="13"/><text x="99.8437%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (121 samples, 0.11%)</title><rect x="99.6107%" y="229" width="0.1143%" height="15" fill="rgb(234,36,40)" fg:x="105431" fg:w="121"/><text x="99.8607%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::_{{closure}} (84 samples, 0.08%)</title><rect x="99.7251%" y="229" width="0.0794%" height="15" fill="rgb(213,64,8)" fg:x="105552" fg:w="84"/><text x="99.9751%" y="239.50"></text></g><g><title>randoms::approximate_delta_y (373 samples, 0.35%)</title><rect x="99.6060%" y="245" width="0.3524%" height="15" fill="rgb(210,75,36)" fg:x="105426" fg:w="373"/><text x="99.8560%" y="255.50"></text></g><g><title>randoms::histogram::histogram::_{{closure}} (157 samples, 0.15%)</title><rect x="99.8101%" y="229" width="0.1483%" height="15" fill="rgb(229,88,21)" fg:x="105642" fg:w="157"/><text x="100.0601%" y="239.50"></text></g><g><title>start (105,801 samples, 99.96%)</title><rect x="0.0009%" y="325" width="99.9603%" height="15" fill="rgb(252,204,47)" fg:x="1" fg:w="105801"/><text x="0.2509%" y="335.50">start</text></g><g><title>main (105,794 samples, 99.95%)</title><rect x="0.0076%" y="309" width="99.9537%" height="15" fill="rgb(208,77,27)" fg:x="8" fg:w="105794"/><text x="0.2576%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (105,794 samples, 99.95%)</title><rect x="0.0076%" y="293" width="99.9537%" height="15" fill="rgb(221,76,26)" fg:x="8" fg:w="105794"/><text x="0.2576%" y="303.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (105,793 samples, 99.95%)</title><rect x="0.0085%" y="277" width="99.9528%" height="15" fill="rgb(225,139,18)" fg:x="9" fg:w="105793"/><text x="0.2585%" y="287.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (105,793 samples, 99.95%)</title><rect x="0.0085%" y="261" width="99.9528%" height="15" fill="rgb(230,137,11)" fg:x="9" fg:w="105793"/><text x="0.2585%" y="271.50">core::ops::function::FnOnce::call_once</text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (13 samples, 0.01%)</title><rect x="99.9622%" y="213" width="0.0123%" height="15" fill="rgb(212,28,1)" fg:x="105803" fg:w="13"/><text x="100.2122%" y="223.50"></text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (13 samples, 0.01%)</title><rect x="99.9622%" y="197" width="0.0123%" height="15" fill="rgb(248,164,17)" fg:x="105803" fg:w="13"/><text x="100.2122%" y="207.50"></text></g><g><title>polars_io::csv::read::read_impl::CoreReader::read_chunk (13 samples, 0.01%)</title><rect x="99.9622%" y="181" width="0.0123%" height="15" fill="rgb(222,171,42)" fg:x="105803" fg:w="13"/><text x="100.2122%" y="191.50"></text></g><g><title>polars_io::csv::read::read_impl::read_chunk (13 samples, 0.01%)</title><rect x="99.9622%" y="165" width="0.0123%" height="15" fill="rgb(243,84,45)" fg:x="105803" fg:w="13"/><text x="100.2122%" y="175.50"></text></g><g><title>polars_io::csv::read::parser::parse_lines (12 samples, 0.01%)</title><rect x="99.9632%" y="149" width="0.0113%" height="15" fill="rgb(252,49,23)" fg:x="105804" fg:w="12"/><text x="100.2132%" y="159.50"></text></g><g><title>all (105,843 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="105843"/><text x="0.2500%" y="351.50"></text></g><g><title>thread_start (41 samples, 0.04%)</title><rect x="99.9613%" y="325" width="0.0387%" height="15" fill="rgb(238,81,41)" fg:x="105802" fg:w="41"/><text x="100.2113%" y="335.50"></text></g><g><title>_pthread_start (41 samples, 0.04%)</title><rect x="99.9613%" y="309" width="0.0387%" height="15" fill="rgb(210,199,37)" fg:x="105802" fg:w="41"/><text x="100.2113%" y="319.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (41 samples, 0.04%)</title><rect x="99.9613%" y="293" width="0.0387%" height="15" fill="rgb(244,192,49)" fg:x="105802" fg:w="41"/><text x="100.2113%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (41 samples, 0.04%)</title><rect x="99.9613%" y="277" width="0.0387%" height="15" fill="rgb(226,211,11)" fg:x="105802" fg:w="41"/><text x="100.2113%" y="287.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (41 samples, 0.04%)</title><rect x="99.9613%" y="261" width="0.0387%" height="15" fill="rgb(236,162,54)" fg:x="105802" fg:w="41"/><text x="100.2113%" y="271.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (41 samples, 0.04%)</title><rect x="99.9613%" y="245" width="0.0387%" height="15" fill="rgb(220,229,9)" fg:x="105802" fg:w="41"/><text x="100.2113%" y="255.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (41 samples, 0.04%)</title><rect x="99.9613%" y="229" width="0.0387%" height="15" fill="rgb(250,87,22)" fg:x="105802" fg:w="41"/><text x="100.2113%" y="239.50"></text></g><g><title>swtch_pri (18 samples, 0.02%)</title><rect x="99.9830%" y="213" width="0.0170%" height="15" fill="rgb(239,43,17)" fg:x="105825" fg:w="18"/><text x="100.2330%" y="223.50"></text></g></svg></svg>